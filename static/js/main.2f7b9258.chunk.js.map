{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","weather","error","API_KEY","App","state","undefined","sunrise","sunset","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","setState","main","sys","pressure","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iPASeA,EAPF,kBACX,6BACE,2CACA,mECIWC,EAPF,SAAAC,GAAK,OAChB,0BAAMC,SAAUD,EAAME,eACtB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,qDCaaC,EAhBC,SAAAN,GAAK,OACjB,yBAAKO,UAAU,aAEZP,EAAMQ,MACL,6BACA,yCAAeR,EAAMQ,KAArB,KAA6BR,EAAMS,SACnC,4CAAkBT,EAAMU,KAAxB,UACA,wCAAcV,EAAMW,UAGtB,uBAAGJ,UAAY,SAASP,EAAMY,SCP9BC,EAAU,mCAmFDC,E,4MA/EbC,MAAQ,CACNL,UAAKM,EACLR,UAAKQ,EACLP,aAAQO,EACRC,aAAQD,EACRE,YAAOF,EACPJ,WAAMI,G,EAIRG,e,uCAAiB,WAAOC,GAAP,mBAAAC,EAAA,yDACfD,EAAEE,mBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFrB,iCAOSC,MAAM,oDAAD,OAAqDlB,EAArD,kBAAmEK,EAAnE,kBAPd,cAOPc,EAPO,gBAQMA,EAAQC,OARd,OAQPC,EARO,OASbC,QAAQC,IAAIF,GAOZ,EAAKG,SAAS,CACZtB,KAAKmB,EAAKI,KAAKvB,KACfF,KAAKqB,EAAKzB,KACVK,QAAQoB,EAAKK,IAAIzB,QACjB0B,SAASN,EAAKI,KAAKE,SAEnBxB,QAAQkB,EAAKlB,QAAQ,GAAGsB,KACxBrB,WAAMI,IAvBK,wBA0Bb,EAAKgB,SAAS,CACZtB,UAAKM,EACLR,UAAKQ,EACLP,aAAQO,EACRC,aAAQD,EAERL,aAAQK,EACRJ,MAAO,+BAjCI,4C,6GAuCf,OACE,yBAAKL,UAAU,WACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,iBACf,kBAAC,EAAD,CAAML,cAAekC,KAAKjB,iBAC1B,kBAAC,EAAD,CACET,KAAM0B,KAAKrB,MAAML,KACjBF,KAAM4B,KAAKrB,MAAMP,KACjBC,QAAS2B,KAAKrB,MAAMN,QACpB0B,SAAUC,KAAKrB,MAAMoB,SAErBxB,QAASyB,KAAKrB,MAAMJ,QACpBC,MAAOwB,KAAKrB,MAAMH,iB,GApEZyB,IAAMC,W,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACLkB,QAAQlB,MAAMA,EAAM4C,a","file":"static/js/main.2f7b9258.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () =>(\r\n  <div>\r\n    <h2>Weather App</h2>\r\n    <p>Find out the weather in your city!</p>\r\n  </div>\r\n)\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nconst Form = props =>(\r\n  <form onSubmit={props.weatherMethod}>\r\n  <input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n  <button>Get the weather</button>\r\n  </form>\r\n)\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props =>(\r\n    <div className=\"infoWeath\">\r\n\r\n      {props.city &&\r\n        <div>\r\n        <p> Location: {props.city}, {props.country}</p>\r\n        <p> Temperature: {props.temp} Â°C</p>\r\n        <p> Weather: {props.weather}</p>\r\n        </div>\r\n      }\r\n      <p className = \"error\">{props.error}</p>\r\n\r\n  </div>\r\n  )\r\n\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"d9395bbd7cdb7abe91f34162ea466182\";\r\n\r\nclass App extends React.Component{\r\n\r\n  state = {\r\n    temp:undefined,\r\n    city:undefined,\r\n    country:undefined,\r\n    sunrise:undefined,\r\n    sunset:undefined,\r\n    error:undefined\r\n\r\n  }\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n\r\n\r\n    if(city){\r\n\r\n      const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n      const data = await api_url.json();\r\n      console.log(data);\r\n\r\n      // var sunset = data.sys.sunset;\r\n      // var date = new Date();\r\n      // date.setTime(sunset);\r\n      // var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n\r\n      this.setState({\r\n        temp:data.main.temp,\r\n        city:data.name,\r\n        country:data.sys.country,\r\n        pressure:data.main.pressure,\r\n        // sunset:sunset_date,\r\n        weather:data.weather[0].main,\r\n        error:undefined\r\n      });\r\n    } else{\r\n      this.setState({\r\n        temp:undefined,\r\n        city:undefined,\r\n        country:undefined,\r\n        sunrise:undefined,\r\n        // sunset:undefined,\r\n        weather:undefined,\r\n        error: \"Please, enter a city name!\"\r\n      });\r\n    }\r\n\r\n    }\r\n  render(){\r\n    return(\r\n      <div className=\"wrapper\">\r\n      <div className=\"main\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-5 info\">\r\n            <Info />\r\n          </div>\r\n          <div className=\"col-sm-7 form\">\r\n          <Form weatherMethod={this.gettingWeather}/>\r\n          <Weather\r\n            temp={this.state.temp}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            pressure={this.state.pressure}\r\n            // sunset={this.state.sunset}\r\n            weather={this.state.weather}\r\n            error={this.state.error}\r\n\r\n           /></div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}